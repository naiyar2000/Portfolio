/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { prefix } from '@/prefix'
import { useClientMediaQuery } from '@/hooks/useClientMediaQuery'
type GLTFResult = GLTF & {
    nodes: {
        Object_2002: THREE.SkinnedMesh
        mixamorigHips: THREE.Bone
    }
    materials: {
        ['COC_iOS_HER_WWI_CLA_B.002']: THREE.MeshStandardMaterial
    }
}

type ActionName =
    | 'Armature.001|mixamo.com|Layer0'
    | 'Armature.002|mixamo.com|Layer0.003'
    | 'Armature.003|mixamo.com|Layer0'
    | 'Armature|mixamo.com|Layer0_Armature.001'

type ActionTypes = "dance" | "backflip" | "sideflip" | "laugh";

type ActionMapping = {
    [key in ActionTypes]?: ActionName
}

interface DeadPoolProps {
    props: any,
    characterAction?: ActionTypes,
    pause?: boolean
}

export function Deadpool({ props, characterAction, pause }: DeadPoolProps) {
    const group = useRef<THREE.Group | null>(null)
    const { nodes, materials, animations } = useGLTF(`${prefix}/model/deadpool/deadpool.glb`) as GLTFResult
    const [scale, setScale] = useState(0.01);

    const isMobile = useClientMediaQuery('(max-width: 600px)')

    const { actions } = useAnimations(animations, group);

    const actionType: ActionMapping = {
        "backflip": "Armature.001|mixamo.com|Layer0",
        "sideflip": "Armature.002|mixamo.com|Layer0.003",
        "laugh": "Armature.003|mixamo.com|Layer0",
        "dance": "Armature|mixamo.com|Layer0_Armature.001",
    }


    useEffect(() => {
        const action = actions[actionType?.[`${characterAction || "laugh"}`] || "Armature.003|mixamo.com|Layer0"];
        if (pause) {
            if (action) {
                action.paused = true;
            }
        } else {
            if (action) {
                action.paused = false;
                action.reset()?.fadeIn(0.5)?.play()
            }
        }

        return () => {
            actions[actionType?.[`${characterAction || "laugh"}`] || "Armature.003|mixamo.com|Layer0"]?.fadeOut(0.5);
        }
    }, [nodes, actions, characterAction, animations, pause])

    useEffect(() => {
        if(isMobile) {
            setScale(0.005)
        }
    }, [isMobile])
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Armature"
                    position={[-0.314, -0.187, -0.007]}
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={scale}>
                    <skinnedMesh
                        name="Object_2002"
                        geometry={nodes.Object_2002.geometry}
                        material={materials['COC_iOS_HER_WWI_CLA_B.002']}
                        skeleton={nodes.Object_2002.skeleton}
                    />
                    <primitive object={nodes.mixamorigHips} />
                </group>
            </group>
        </group>
    )
}

useGLTF.preload(`${prefix}/model/deadpool/deadpool.glb`)
