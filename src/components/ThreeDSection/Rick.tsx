/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DavidA3D (https://sketchfab.com/DavidA3D)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/rick-rick-and-morty-3c0928c16ddd4e61ab23d0b141648ed4
Title: Rick (Rick and Morty)
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { prefix } from '@/prefix'

type GLTFResult = GLTF & {
    nodes: {
        Object_2: THREE.Mesh
    }
    materials: {
        Material1: THREE.MeshStandardMaterial
    }
}

interface RickProps {
    animationName?: string;
    props?: JSX.IntrinsicElements['group'];
}


export function Rick({ animationName = "dance", ...props }: RickProps) {
    const { nodes, materials } = useGLTF('model/rick/rick_rick_and_morty.glb') as GLTFResult

    const group = useRef<THREE.Group | null>(null) // Correct type for group reference
    useEffect(() => {
        console.log(nodes) // Inspect the loaded GLTF nodes to see their structure
    }, [nodes])

    // Load the dance animation from FBX file
    const { animations: dance } = useFBX(`${prefix}/model/rick/animations/rick_dance.fbx`)

    // Log animations to inspect tracks
    useEffect(() => {
        console.log(dance) // Check the animation tracks
    }, [dance])

    // Assign name to animation for proper access
    let cleanAnimationTrackNames = (animations: THREE.AnimationClip[], prefixToRemove: string) => {
        animations.forEach((animation) => {
            animation.tracks.forEach((track) => {
                if (track.name.startsWith(prefixToRemove)) {
                    track.name = track.name.replace(prefixToRemove, '');
                }
            });
        });
    };
    dance[0].name = 'dance'
    cleanAnimationTrackNames(dance, "mixamorig");
    const { actions } = useAnimations([dance[0]], group)

    useEffect(() => {
        // Reset and play the selected animation
        actions[animationName]?.reset()?.fadeIn(0.5)?.play()

        // Cleanup: Fade out the animation when component unmounts or animation changes
        return () => {
            actions[animationName]?.fadeOut(0.5)
        }
    }, [animationName, actions])

    return (
        <group {...props} dispose={null} ref={group}>
            <group rotation={[-Math.PI / 2, 0, 0]}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_2.geometry}
                    material={materials.Material1}
                    position={[-0.306, -0.315, -0.003]}
                />
            </group>
        </group>
    )
}

useGLTF.preload('model/rick/rick_rick_and_morty.glb')
useFBX.preload('model/rick/animations/rick_dance.fbx')
